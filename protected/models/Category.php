<?php/** * This is the model class for table "{{category}}". * * The followings are the available columns in table '{{category}}': * @property string $category_id * @property string $category_name * @property string $parent_id * @property integer $sort_order * @property integer $if_show */class Category extends CActiveRecord {    /**     * Returns the static model of the specified AR class.     * @return category the static model class     */    public static function model($className = __CLASS__) {        return parent::model($className);    }    /**     * @return string the associated database table name     */    public function tableName() {        return '{{category}}';    }    /**     * @return array validation rules for model attributes.     */    public function rules() {        // NOTE: you should only define rules for those attributes that        // will receive user inputs.        return array(            array('sort_order, if_show', 'numerical', 'integerOnly' => true),            array('category_name', 'length', 'max' => 100),            array('parent_id', 'length', 'max' => 10),            array('url, pic', 'safe'),            array('url', 'unique'),            // The following rule is used by search().            // Please remove those attributes that should not be searched.            array('category_id, category_name, parent_id, sort_order, if_show', 'safe', 'on' => 'search'),        );    }    /**     * @return array relational rules.     */    public function relations() {        // NOTE: you may need to adjust the relation name and the related        // class name for the relations automatically generated below.        return array(        );    }    /**     * @return array customized attribute labels (name=>label)     */    public function attributeLabels() {        return array(            'category_id' => 'ID',            'category_name' => '分类名',            'parent_id' => '上一级',            'url' => 'SEO URL',            'pic' => '分类图片',            'sort_order' => '排序',            'if_show' => '显示',        );    }    /**     * Retrieves a list of models based on the current search/filter conditions.     * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.     */    public function search() {        // Warning: Please modify the following code to remove attributes that        // should not be searched.        $criteria = new CDbCriteria;        $criteria->compare('category_id', $this->category_id, true);        $criteria->compare('category_name', $this->category_name, true);        $criteria->compare('parent_id', $this->parent_id, true);        $criteria->compare('sort_order', $this->sort_order);        $criteria->compare('if_show', $this->if_show);        return new CActiveDataProvider(get_class($this), array(                    'criteria' => $criteria,                ));    }    public function getChildCount() {        $cri = new CDbCriteria(array(                    'condition' => 'parent_id =' . $this->category_id                ));        $childs = Category::model()->findAll($cri);        $count = count($childs);        return $count;    }    /**     * 获取指定id的所有后代，不含指定id     * @param type $id 指定id, 有可能是array     * @return type 所有后代id的一维数组     */    public static function getChildsId($id) {        $data = array();        $ids = array();        if (!is_array($id)) {            $id = array($id);        }        $id = implode(', ', $id);        $models = category::model()->findAll('parent_id in (' . $id . ')');        if ($models) {            foreach ($models as $model) {                $ids[] = $model->category_id;            }            $ids = array_merge($ids, Category::getChildsId($ids));            return $ids;        } else {            return $ids;        }    }    /**     * 获得指定id的所有后代，含指定id     * @param mixed $id 指定id, 有可能是array     * @return array 所有后代的和指定id的一维数组     */    function getMeChildsId($id) {        if (!is_array($id)) {            $id = array($id);        }        return array_merge($id, Category::getChildsId($id));    }        public function getThumb() {        $img = '/upload/category/' . $this->pic;        $img_thumb = Yii::app()->request->baseUrl . ImageHelper::thumb(750, 368, $img, array('method' => 'adaptiveResize'));        $img_thumb_now = CHtml::image($img_thumb, $this->pic);        return $img_thumb_now;    }}