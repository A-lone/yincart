<?phpclass ItemController extends Controller {    public $layout = '//layouts/catalog';    public function actionIndex() {        $id = $_REQUEST['category_id'];        $brand_id = $_REQUEST['brand_id'];        $price = $_REQUEST['price'];        $category = Category::model()->findByPk($id);        if ($brand_id) {            $condition = $brand_id ? 'is_show = 1 and brand_id =' . $brand_id : 'is_show = 1';        }        if ($id) {            $catmodel = new Category();            $ids = $catmodel->getMeChildsId($id);            $cid = implode(',', $ids);            $condition = $id ? 'is_show = 1 and category_id in (' . $cid . ')' : 'is_show = 1';        }        if ($price) {            if ($price && $id) {                $catmodel = new Category();                $ids = $catmodel->getMeChildsId($id);                $cid = implode(',', $ids);                $condition = $id ? 'is_show = 1 and  shop_price=' . $price . ' and category_id in (' . $cid . ')' : 'is_show = 1';            }        }        $keyword = $_REQUEST['keyword'];        if ($keyword) {            $condition = $keyword ? 'is_show = 1 and item_name like' . "'%$keyword%'" . 'or item_sn like' . "'%$keyword%'" : 'is_show = 1';        }        $criteria = new CDbCriteria(array(                    'condition' => $condition,                    'order' => 'sort_order asc, item_id desc'                ));        $count = Item::model()->count($criteria);        $pages = new CPagination($count);        // results per page        $pages->pageSize = 20;        $pages->applyLimit($criteria);        $items = Item::model()->findAll($criteria);        $this->render('index', array(            'items' => $items,            'pages' => $pages,            'keyword' => $keyword,            'category' => $category        ));    }    public function actionList() {        $this->layout = '//layouts/column1';        $cri = new CDbCriteria(array(                    'condition' => 'parent_id = 0'                ));        $categories = Category::model()->findAll($cri);        $this->render('list', array(            'categories' => $categories        ));    }    /**     * Displays a particular model.     * @param integer $id the ID of the model to be displayed     */    public function actionView($id) {        $this->layout = '//layouts/column1';        $model = $this->loadModel($id);//        $cookies[$name] = new CHttpCookie($name, $value); // sends a cookie//        $value = $cookies[$name]->value; // reads a cookie value//        unset($cookies[$name]);  // removes a cookie        /* 记录浏览历史 */                if (!empty($_COOKIE['CART']['history'])) {            $history = explode(',', $_COOKIE['CART']['history']);            array_unshift($history, $id);            $history = array_unique($history);            while (count($history) > 5) {                array_pop($history);            }            setcookie('CART[history]', implode(',', $history), F::gmtime() + 3600 * 24 * 30);        } else {            setcookie('CART[history]', $id, F::gmtime() + 3600 * 24 * 30);        }        //        echo  CHttpRequest::getCookies();//        print_r($_COOKIE['CART']['history']);        /* 更新点击次数 */        $model->click_count = $model->click_count + 1;        $model->save();        $this->render('view', array(            'model' => $model,        ));    }        public function actionClearHistory()    {        setcookie('CART[history]',   '', 1);    }    /**     * Returns the data model based on the primary key given in the GET variable.     * If the data model is not found, an HTTP exception will be raised.     * @param integer the ID of the model to be loaded     */    public function loadModel($id) {        $model = Item::model()->findByPk((int) $id);        if ($model === null)            throw new CHttpException(404, 'The requested page does not exist.');        return $model;    }    // Uncomment the following methods and override them if needed    /*      public function filters()      {      // return the filter configuration for this controller, e.g.:      return array(      'inlineFilterName',      array(      'class'=>'path.to.FilterClass',      'propertyName'=>'propertyValue',      ),      );      }      public function actions()      {      // return external action classes, e.g.:      return array(      'action1'=>'path.to.ActionClass',      'action2'=>array(      'class'=>'path.to.AnotherActionClass',      'propertyName'=>'propertyValue',      ),      );      }     */}